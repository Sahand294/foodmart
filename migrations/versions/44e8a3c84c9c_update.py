"""update

Revision ID: 44e8a3c84c9c
Revises: e63cbf8da202
Create Date: 2025-08-14 20:55:22.663086

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '44e8a3c84c9c'
down_revision = 'e63cbf8da202'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('cart_products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('Cart_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('Product_id', sa.Integer(), nullable=False))
        batch_op.drop_constraint(batch_op.f('cart_products_product_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('cart_products_cart_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'carts', ['Cart_id'], ['id'])
        batch_op.create_foreign_key(None, 'products', ['Product_id'], ['id'])
        batch_op.drop_column('product_id')
        batch_op.drop_column('amount')
        batch_op.drop_column('cart_id')

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('products_brand_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('products_brand_name_fkey'), type_='foreignkey')
        batch_op.drop_column('brand_id')
        batch_op.drop_column('brand_name')

    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=False))
    # op.drop_table('category_and_product')
    # op.drop_table('brand-categorys')
    # op.drop_table('city')
    # op.drop_table('country')
    # op.drop_table('orders')
    # op.drop_table('provinces')
    # op.drop_table('category')
    # op.drop_table('brands')
    # op.drop_table('address_user')
    # op.drop_table('PaymentMethod')
    # op.drop_table('coupons')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.drop_column('id')

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('brand_name', sa.VARCHAR(length=300), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('brand_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('products_brand_name_fkey'), 'brands', ['brand_name'], ['name'])
        batch_op.create_foreign_key(batch_op.f('products_brand_id_fkey'), 'brands', ['brand_id'], ['id'])

    with op.batch_alter_table('cart_products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cart_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('cart_products_cart_id_fkey'), 'carts', ['cart_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('cart_products_product_id_fkey'), 'products', ['product_id'], ['id'])
        batch_op.drop_column('Product_id')
        batch_op.drop_column('Cart_id')

    op.create_table('coupons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('coupons_pkey'))
    )
    op.create_table('PaymentMethod',
    sa.Column('authentication', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('PaymentMethod_pkey')),
    sa.UniqueConstraint('payment_name', name=op.f('PaymentMethod_payment_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('address_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('city', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=999), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=999), autoincrement=False, nullable=True),
    sa.Column('User', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['User'], ['users.id'], name=op.f('address_user_User_fkey')),
    sa.ForeignKeyConstraint(['city'], ['city.id'], name=op.f('address_user_city_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('address_user_pkey'))
    )
    op.create_table('brands',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('brands_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('brandcategory', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['brandcategory'], ['brand-categorys.id'], name='brands_brandcategory_fkey'),
    sa.PrimaryKeyConstraint('id', name='brands_pkey'),
    sa.UniqueConstraint('name', name='brands_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('provinces',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('provinces_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('country', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country'], ['country.id'], name='provinces_country_fkey'),
    sa.PrimaryKeyConstraint('id', name='provinces_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('orders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cart', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('purchase_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['cart'], ['carts.id'], name=op.f('orders_cart_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('orders_pkey'))
    )
    op.create_table('country',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('country_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='country_pkey'),
    sa.UniqueConstraint('key', name='country_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('city',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('province', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['province'], ['provinces.id'], name=op.f('city_province_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('city_pkey')),
    sa.UniqueConstraint('key', name=op.f('city_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('brand-categorys',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"brand-categorys_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='brand-categorys_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('category_and_product',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('categoryid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('productid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['categoryid'], ['category.id'], name=op.f('category_and_product_categoryid_fkey')),
    sa.ForeignKeyConstraint(['productid'], ['products.id'], name=op.f('category_and_product_productid_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('category_and_product_pkey'))
    )
    # ### end Alembic commands ###
