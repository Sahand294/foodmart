"""doing the cartitem

Revision ID: b23b65014456
Revises: 
Create Date: 2025-09-20 16:22:53.661418

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b23b65014456'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cart_item',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cartid', sa.Integer(), nullable=True),
    sa.Column('productid', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cartid'], ['carts.id'], ),
    sa.ForeignKeyConstraint(['productid'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.drop_table('cart_products')
    # op.drop_table('provinces')
    # op.drop_table('address_user')
    # op.drop_table('PaymentMethod')
    # op.drop_table('site_setting')
    # op.drop_table('city')
    # op.drop_table('country')
    # op.drop_table('brands')
    # op.drop_table('coupons')
    # op.drop_table('brand-categorys')
    with op.batch_alter_table('order_items', schema=None) as batch_op:
        batch_op.alter_column('order_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               nullable=False)
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               nullable=False)
        batch_op.alter_column('cart_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               nullable=False)
        batch_op.alter_column('amount',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               nullable=False)
        batch_op.alter_column('price',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               nullable=False)
        # batch_op.drop_constraint(batch_op.f('fk_product'), type_='foreignkey')
        # batch_op.drop_constraint(batch_op.f('fk_order'), type_='foreignkey')
        # batch_op.drop_constraint(batch_op.f('fk_cart'), type_='foreignkey')
        # batch_op.create_foreign_key(None, 'carts', ['cart_id'], ['id'])
        # batch_op.create_foreign_key(None, 'products', ['product_id'], ['id'])
        # batch_op.create_foreign_key(None, 'orders', ['order_id'], ['id'])

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.alter_column('image',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)

    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.alter_column('role_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('permission_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.alter_column('permission_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('role_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.alter_column('image',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)

    with op.batch_alter_table('order_items', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_cart'), 'carts', ['cart_id'], ['id'], ondelete='SET NULL')
        batch_op.create_foreign_key(batch_op.f('fk_order'), 'orders', ['order_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('fk_product'), 'products', ['product_id'], ['id'], ondelete='RESTRICT')
        batch_op.alter_column('price',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('amount',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('cart_id',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('product_id',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('order_id',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               nullable=False)

    op.create_table('brand-categorys',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"brand-categorys_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='brand-categorys_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('coupons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('coupons_pkey'))
    )
    op.create_table('brands',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('brandcategory', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['brandcategory'], ['brand-categorys.id'], name=op.f('brands_brandcategory_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('brands_pkey')),
    sa.UniqueConstraint('name', name=op.f('brands_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('country',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('country_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='country_pkey'),
    sa.UniqueConstraint('key', name='country_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('city',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('city_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('province', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['province'], ['provinces.id'], name='city_province_fkey'),
    sa.PrimaryKeyConstraint('id', name='city_pkey'),
    sa.UniqueConstraint('key', name='city_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('site_setting',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('Value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('site_setting_pkey')),
    sa.UniqueConstraint('key', name=op.f('site_setting_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('PaymentMethod',
    sa.Column('authentication', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('PaymentMethod_pkey')),
    sa.UniqueConstraint('payment_name', name=op.f('PaymentMethod_payment_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('address_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('city', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=999), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=999), autoincrement=False, nullable=True),
    sa.Column('User', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['User'], ['users.id'], name=op.f('address_user_User_fkey')),
    sa.ForeignKeyConstraint(['city'], ['city.id'], name=op.f('address_user_city_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('address_user_pkey'))
    )
    op.create_table('provinces',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('country', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country'], ['country.id'], name=op.f('provinces_country_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('provinces_pkey'))
    )
    op.create_table('cart_products',
    sa.Column('id', sa.INTEGER(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('cartid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('productid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cartid'], ['carts.id'], name=op.f('cart_products_cartid_fkey')),
    sa.ForeignKeyConstraint(['productid'], ['products.id'], name=op.f('cart_products_productid_fkey'))
    )
    op.drop_table('cart_item')
    # ### end Alembic commands ###
